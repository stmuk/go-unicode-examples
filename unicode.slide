Go Unicode
A Simple, Quick Introduction for Humans

Steve Mynott
steve.mynott@gmail.com
https://suffolkgophers.github.io/

: Basic Introduction not advanced - keep it fairly simple - basics of what most programmers need to know to handle those "funny characters"


* Introduction

- Why Unicode?

- Over 6000 living languages and many use non Latin characters

- US-ASCII has 127 characters (7 bit)

- Latin -1 and -9 have 256 characters (8 bit)

- Unicode 10 has 136,690 characters (over a million possible)

: Why do we need unicode? The world isn't European style plain text (ASCII) anymore

: People want to send amusing emojis on their mobiles!

: ASCII is now called US-ASCII (no Euro or Pound symbol)

: Pound Sterling symbol is in Latin-1 and Euro in Latin-9

: unicode 10 from 2017

: utf-8 now standard for web pages and email

* The Stack

- Graphemes - roughly human language character

- Codepoints - things unicode spec gives numbers to (Go rune or int32)

- Bytes - disk or memory

.play stack.go /START OMIT/,/END OMIT/

: start at top of stack

: Language - char and byte interchangable (used to be)

: Few use constantly. Character may mean codepoint

* Encodings

- UTF-32
simple only fixed length encoding but wasteful in terms of commonly used chars

- UTF-8
Two of the Go inventors (Ken Thompson & Rob Pike) created UTF-8 which uses bytes but variable length encoding (compatibility with ASCII)

- WTF-8
Wobbly Transformation Format (probably something Very Bad)

: Everything is really bits at the bottom but what do they represent?

: Many characters can be represented in a byte not 4 bytes

: WTF-8 (don't use it. Mozilla hack for internal systems used for legacy reasons)

* Mojibake

- Confused encodings leads to jumbled, unreadable characters

- Tended to be a Japanese or Windows problem

- Moving between different encodings

- Stick to UTF-8

- iPhone crash with Indian character

: Not displaying chars isn't necessarily Mojibake could be font issue

* UTF-8

- 1 to 4 bytes per codepoint (1 byte ASCII)

Look at the first byte high bits

  0xxxxxxx (1 byte ASCII) with 127 chars possible
  110xxxxx 10xxxxxx with 2047 chars possible

- Extends to 3 and 4 bytes

: Superset of ASCII

: Most are 3 bytes long

: Due to use of high bits these bytes don't contain full 8 bits for codepoint

* 16 bit codepoint

- Lower Case u in string literal

- Pound Symbol

.play pound.go /START OMIT/,/END OMIT/

: Any modern editor/IDE will have similar keystrokes to the Go string literal syntax

: May have to configure your terminal & font on some systems, even on macOS what you see in the terminal & browser may be different

: Could have used unicode variable names!

* 32 bit codepoint

- Upper Case U in string literal

.play euro.go /START OMIT/,/END OMIT/

* Another 32 bit codepoint

"Cat - tears of laughter"

.play cat.go /START OMIT/,/END OMIT/

* Accent
.play accent.go /START OMIT/,/END OMIT/

- tweet #stoutmoji

: Composite unicode char - which I'll come to shortly

: add skin tones to human characters

: BEER #stoutmoji in Unicode 11

* Strange D
.play stranged.go /START OMIT/,/END OMIT/

: Contrived Example to show graphemes different to codepoints

* Normalisation

.play normalisation.go /START OMIT/,/END OMIT/
